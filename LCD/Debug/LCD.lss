
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000020e  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010e  0080010e  000002b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f05  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d4  00000000  00000000  000012a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000512  00000000  00000000  00001c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00002188  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c7  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d8  00000000  00000000  0000275f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002c37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e0       	ldi	r30, 0x0E	; 14
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	99 d0       	rcall	.+306    	; 0x1f6 <main>
  c4:	a2 c0       	rjmp	.+324    	; 0x20a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <flash_enable>:
void send_integer(double numb)
{
	char b[10];
	itoa(numb,b,10);			//convert integer to string
	send_string(b);
}
  c8:	c2 9a       	sbi	0x18, 2	; 24
  ca:	00 00       	nop
  cc:	00 00       	nop
  ce:	c2 98       	cbi	0x18, 2	; 24
  d0:	08 95       	ret

000000d2 <lcd_busy>:
  d2:	11 ba       	out	0x11, r1	; 17
  d4:	c0 98       	cbi	0x18, 0	; 24
  d6:	c1 9a       	sbi	0x18, 1	; 24
  d8:	97 9b       	sbis	0x12, 7	; 18
  da:	03 c0       	rjmp	.+6      	; 0xe2 <lcd_busy+0x10>
  dc:	f5 df       	rcall	.-22     	; 0xc8 <flash_enable>
  de:	97 99       	sbic	0x12, 7	; 18
  e0:	fd cf       	rjmp	.-6      	; 0xdc <lcd_busy+0xa>
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	81 bb       	out	0x11, r24	; 17
  e6:	08 95       	ret

000000e8 <send_command>:
  e8:	cf 93       	push	r28
  ea:	c8 2f       	mov	r28, r24
  ec:	f2 df       	rcall	.-28     	; 0xd2 <lcd_busy>
  ee:	c2 bb       	out	0x12, r28	; 18
  f0:	c0 98       	cbi	0x18, 0	; 24
  f2:	c1 98       	cbi	0x18, 1	; 24
  f4:	e9 df       	rcall	.-46     	; 0xc8 <flash_enable>
  f6:	12 ba       	out	0x12, r1	; 18
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <config_LCD>:
  fc:	87 b3       	in	r24, 0x17	; 23
  fe:	87 60       	ori	r24, 0x07	; 7
 100:	87 bb       	out	0x17, r24	; 23
 102:	85 ea       	ldi	r24, 0xA5	; 165
 104:	9e e0       	ldi	r25, 0x0E	; 14
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <config_LCD+0xa>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <config_LCD+0x10>
 10c:	00 00       	nop
 10e:	88 e3       	ldi	r24, 0x38	; 56
 110:	eb df       	rcall	.-42     	; 0xe8 <send_command>
 112:	84 e6       	ldi	r24, 0x64	; 100
 114:	94 e0       	ldi	r25, 0x04	; 4
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <config_LCD+0x1a>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <config_LCD+0x20>
 11c:	00 00       	nop
 11e:	88 e3       	ldi	r24, 0x38	; 56
 120:	e3 df       	rcall	.-58     	; 0xe8 <send_command>
 122:	84 e6       	ldi	r24, 0x64	; 100
 124:	94 e0       	ldi	r25, 0x04	; 4
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <config_LCD+0x2a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <config_LCD+0x30>
 12c:	00 00       	nop
 12e:	88 e3       	ldi	r24, 0x38	; 56
 130:	db df       	rcall	.-74     	; 0xe8 <send_command>
 132:	92 e3       	ldi	r25, 0x32	; 50
 134:	9a 95       	dec	r25
 136:	f1 f7       	brne	.-4      	; 0x134 <config_LCD+0x38>
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	d6 df       	rcall	.-84     	; 0xe8 <send_command>
 13c:	83 ef       	ldi	r24, 0xF3	; 243
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <config_LCD+0x44>
 144:	00 c0       	rjmp	.+0      	; 0x146 <config_LCD+0x4a>
 146:	00 00       	nop
 148:	8e e0       	ldi	r24, 0x0E	; 14
 14a:	ce df       	rcall	.-100    	; 0xe8 <send_command>
 14c:	83 ef       	ldi	r24, 0xF3	; 243
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <config_LCD+0x54>
 154:	00 c0       	rjmp	.+0      	; 0x156 <config_LCD+0x5a>
 156:	00 00       	nop
 158:	08 95       	ret

0000015a <send_char>:
 15a:	cf 93       	push	r28
 15c:	c8 2f       	mov	r28, r24
 15e:	b9 df       	rcall	.-142    	; 0xd2 <lcd_busy>
 160:	c2 bb       	out	0x12, r28	; 18
 162:	c0 9a       	sbi	0x18, 0	; 24
 164:	c1 98       	cbi	0x18, 1	; 24
 166:	b0 df       	rcall	.-160    	; 0xc8 <flash_enable>
 168:	12 ba       	out	0x12, r1	; 18
 16a:	87 ec       	ldi	r24, 0xC7	; 199
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <send_char+0x14>
 172:	00 c0       	rjmp	.+0      	; 0x174 <send_char+0x1a>
 174:	00 00       	nop
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <send_string>:
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	ec 01       	movw	r28, r24
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 188:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 18c:	88 81       	ld	r24, Y
 18e:	81 11       	cpse	r24, r1
 190:	05 c0       	rjmp	.+10     	; 0x19c <send_string+0x22>
 192:	12 c0       	rjmp	.+36     	; 0x1b8 <send_string+0x3e>
 194:	41 97       	sbiw	r24, 0x11	; 17
 196:	11 f4       	brne	.+4      	; 0x19c <send_string+0x22>
 198:	80 ec       	ldi	r24, 0xC0	; 192
 19a:	a6 df       	rcall	.-180    	; 0xe8 <send_command>
 19c:	89 91       	ld	r24, Y+
 19e:	dd df       	rcall	.-70     	; 0x15a <send_char>
 1a0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1a4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 1ae:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 1b2:	28 81       	ld	r18, Y
 1b4:	21 11       	cpse	r18, r1
 1b6:	ee cf       	rjmp	.-36     	; 0x194 <send_string+0x1a>
 1b8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
 1bc:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <goto_location>:
void goto_location(int x,int y)
{
	if (y == 2)
 1c6:	62 30       	cpi	r22, 0x02	; 2
 1c8:	71 05       	cpc	r23, r1
 1ca:	49 f4       	brne	.+18     	; 0x1de <goto_location+0x18>
	{
		send_command(0x80 + 64 + x -1);
 1cc:	81 54       	subi	r24, 0x41	; 65
 1ce:	8c df       	rcall	.-232    	; 0xe8 <send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	84 e6       	ldi	r24, 0x64	; 100
 1d2:	94 e0       	ldi	r25, 0x04	; 4
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <goto_location+0xe>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <goto_location+0x14>
 1da:	00 00       	nop
 1dc:	08 95       	ret
		_delay_us(4500);
	}
	else if (y == 1)
 1de:	61 30       	cpi	r22, 0x01	; 1
 1e0:	71 05       	cpc	r23, r1
	{
		send_command(0x80 + x -1);
 1e2:	41 f4       	brne	.+16     	; 0x1f4 <goto_location+0x2e>
 1e4:	81 58       	subi	r24, 0x81	; 129
 1e6:	80 df       	rcall	.-256    	; 0xe8 <send_command>
 1e8:	84 e6       	ldi	r24, 0x64	; 100
 1ea:	94 e0       	ldi	r25, 0x04	; 4
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <goto_location+0x26>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <goto_location+0x2c>
 1f2:	00 00       	nop
 1f4:	08 95       	ret

000001f6 <main>:

#include <c:\users\pankt\Documents\Atmel Studio\7.0\LCD\LCD\lcd.h>


int main(void)
{
 1f6:	82 df       	rcall	.-252    	; 0xfc <config_LCD>
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	e2 df       	rcall	.-60     	; 0x1c6 <goto_location>
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	b9 df       	rcall	.-142    	; 0x17a <send_string>
 208:	ff cf       	rjmp	.-2      	; 0x208 <main+0x12>

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
